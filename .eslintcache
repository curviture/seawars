[{"/home/gev/Desktop/seawars/src/index.js":"1","/home/gev/Desktop/seawars/src/App.js":"2","/home/gev/Desktop/seawars/src/components/Field/Field.js":"3","/home/gev/Desktop/seawars/src/components/Field/Cell.js":"4","/home/gev/Desktop/seawars/src/data/coordinates.js":"5","/home/gev/Desktop/seawars/src/store/store.js":"6","/home/gev/Desktop/seawars/src/store/stageSlice.js":"7","/home/gev/Desktop/seawars/src/components/stages/GameStart.js":"8","/home/gev/Desktop/seawars/src/components/stages/RoundStart.js":"9","/home/gev/Desktop/seawars/src/components/UI/Header.js":"10","/home/gev/Desktop/seawars/src/data/defaultShips.js":"11","/home/gev/Desktop/seawars/src/components/Ships/Ships.js":"12","/home/gev/Desktop/seawars/src/components/stages/Build/Build.js":"13","/home/gev/Desktop/seawars/src/store/buildSlice.js":"14","/home/gev/Desktop/seawars/src/components/stages/Build/Mask.js":"15","/home/gev/Desktop/seawars/src/store/fieldSlice.js":"16","/home/gev/Desktop/seawars/src/utils/fieldUtils/isAllowed.js":"17","/home/gev/Desktop/seawars/src/utils/common/getCoordsFromId.js":"18","/home/gev/Desktop/seawars/src/store/gameSlice.js":"19","/home/gev/Desktop/seawars/src/gameEngine/fillShips.js":"20","/home/gev/Desktop/seawars/src/utils/common/createMatrix.js":"21","/home/gev/Desktop/seawars/src/components/stages/Play/Play.js":"22","/home/gev/Desktop/seawars/src/store/playSlice.js":"23","/home/gev/Desktop/seawars/src/gameEngine/aiPlay.js":"24","/home/gev/Desktop/seawars/src/utils/common/vectors.js":"25","/home/gev/Desktop/seawars/src/utils/common/isOutOfBounds.js":"26","/home/gev/Desktop/seawars/src/gameEngine/isShipOnFieldDead.js":"27","/home/gev/Desktop/seawars/src/utils/common/base.js":"28","/home/gev/Desktop/seawars/src/components/stages/Play/Score.js":"29","/home/gev/Desktop/seawars/src/components/stages/Final.js":"30","/home/gev/Desktop/seawars/src/components/stages/Build/ShipSelection/ShipSelection.js":"31"},{"size":329,"mtime":1668377554715,"results":"32","hashOfConfig":"33"},{"size":1353,"mtime":1671966230683,"results":"34","hashOfConfig":"33"},{"size":1232,"mtime":1672066160235,"results":"35","hashOfConfig":"33"},{"size":571,"mtime":1671991241646,"results":"36","hashOfConfig":"33"},{"size":147,"mtime":1668859853050,"results":"37","hashOfConfig":"33"},{"size":420,"mtime":1669651733245,"results":"38","hashOfConfig":"33"},{"size":580,"mtime":1672140638404,"results":"39","hashOfConfig":"33"},{"size":772,"mtime":1671991024767,"results":"40","hashOfConfig":"33"},{"size":96,"mtime":1668375766087,"results":"41","hashOfConfig":"33"},{"size":204,"mtime":1671988616138,"results":"42","hashOfConfig":"33"},{"size":96,"mtime":1668431536211,"results":"43","hashOfConfig":"33"},{"size":368,"mtime":1668866606216,"results":"44","hashOfConfig":"33"},{"size":6520,"mtime":1672087865784,"results":"45","hashOfConfig":"33"},{"size":1601,"mtime":1669611563056,"results":"46","hashOfConfig":"33"},{"size":761,"mtime":1668803721728,"results":"47","hashOfConfig":"33"},{"size":6039,"mtime":1672139592502,"results":"48","hashOfConfig":"33"},{"size":1434,"mtime":1669554064419,"results":"49","hashOfConfig":"33"},{"size":193,"mtime":1669316190748,"results":"50","hashOfConfig":"33"},{"size":605,"mtime":1671965372052,"results":"51","hashOfConfig":"33"},{"size":1782,"mtime":1669588299949,"results":"52","hashOfConfig":"33"},{"size":246,"mtime":1669574335002,"results":"53","hashOfConfig":"33"},{"size":4192,"mtime":1672140655188,"results":"54","hashOfConfig":"33"},{"size":2494,"mtime":1671966125387,"results":"55","hashOfConfig":"33"},{"size":3204,"mtime":1671970626088,"results":"56","hashOfConfig":"33"},{"size":992,"mtime":1671746790815,"results":"57","hashOfConfig":"33"},{"size":224,"mtime":1670588147031,"results":"58","hashOfConfig":"33"},{"size":1067,"mtime":1670848261828,"results":"59","hashOfConfig":"33"},{"size":97,"mtime":1671385615118,"results":"60","hashOfConfig":"33"},{"size":494,"mtime":1672095110504,"results":"61","hashOfConfig":"33"},{"size":708,"mtime":1672148491888,"results":"62","hashOfConfig":"33"},{"size":1051,"mtime":1672088206743,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"zc0ayw",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},"/home/gev/Desktop/seawars/src/index.js",[],["140","141"],"/home/gev/Desktop/seawars/src/App.js",["142","143","144","145"],"import { useDispatch, useSelector } from \"react-redux\";\nimport gameSlice from \"./store/gameSlice\";\nimport stageSlice from \"./store/stageSlice\";\nimport buildSlice, { changeDirection } from \"./store/buildSlice\";\n\nimport styles from \"./app.module.css\";\n\nimport Header from \"./components/UI/Header\";\nimport GameStart from \"./components/stages/GameStart\";\nimport RoundStart from \"./components/stages/RoundStart\";\nimport Build from \"./components/stages/Build/Build\";\nimport Play from \"./components/stages/Play/Play\";\nimport Final from \"./components/stages/Final\";\nimport { useEffect } from \"react\";\n\nconst App = () => {\n  const { round } = useSelector((state) => state.stage);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    function handleKeyDown(event) {\n      if (event.keyCode === 68) {\n        dispatch(changeDirection());\n      }\n    }\n    document.addEventListener(\"keydown\", handleKeyDown);\n  }, []);\n  return (\n    <div\n      className=\"app\"\n      onKeyDown={(event) => {\n        console.log(event);\n      }}\n    >\n      <Header />\n      <div className={styles.fields}>\n        {round === \"start\" && <GameStart />}\n        {round === \"roundStart\" && <RoundStart />}\n        {round === \"build\" && <Build />}\n        {round === \"play\" && <Play />}\n        {round === \"final\" && <Final />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/home/gev/Desktop/seawars/src/components/Field/Field.js",["146"],"import { useSelector } from \"react-redux\";\n\nimport Cell from \"./Cell\";\n\nimport styles from \"./Field.module.css\";\n\nconst Field = (props) => {\n  const { field } = props;\n\n  const content =\n    field &&\n    field.map((fieldRow, row) =>\n      fieldRow.map((fieldCell, col) => {\n        let { type } = fieldCell;\n        return (\n          <Cell\n            type={props.hidden ? \"\" : type}\n            key={row + \"_\" + col}\n            id={`${row + 1}_${col + 1}`}\n          />\n        );\n      })\n    );\n  const colLabel = field.map((item, idx) => (\n    <span style={{ width: \"20px\", textAlign: \"center\" }}>{idx}</span>\n  ));\n  const rowLabel = field.map((item, idx) => {\n    return (\n      <span style={{ width: \"20px\", textAlign: \"center\", height: \"20px\" }}>\n        {String.fromCharCode(\"a\".charCodeAt(0) + idx)}\n      </span>\n    );\n  });\n\n  return (\n    <div\n      className={styles.fieldContainer}\n      onMouseOverCapture={(event) => {\n        console.log(\"capture\", event.target.id);\n      }}\n    >\n      <div className={styles.rowLabel}>{rowLabel}</div>\n      <div className={styles.field}>{content}</div>\n      <div className={styles.colLabel}>{colLabel}</div>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Field;\n","/home/gev/Desktop/seawars/src/components/Field/Cell.js",["147"],"import style from \"./Cell.module.css\";\n\nconst Cell = (props) => {\n  const { type, id } = props;\n\n  let backgroundStyle = \"\";\n  if (type === \"highlight\") {\n    backgroundStyle = \"blue\";\n  }\n  if (type === \"dead\") {\n    backgroundStyle = \"red\";\n  }\n  if (type === \"notAllowed\") {\n    backgroundStyle = \"black\";\n  }\n  if (type === \"disabled\") {\n    backgroundStyle = \"gray\";\n  }\n  return (\n    <div\n      className={`${style.cell} ${style[type]}`}\n      // style={{ backgroundColor: backgroundStyle }}\n      {...(id && { id: id })}\n    ></div>\n  );\n};\n\nexport default Cell;\n","/home/gev/Desktop/seawars/src/data/coordinates.js",[],["148","149"],"/home/gev/Desktop/seawars/src/store/store.js",[],"/home/gev/Desktop/seawars/src/store/stageSlice.js",[],"/home/gev/Desktop/seawars/src/components/stages/GameStart.js",["150","151"],"import { useDispatch, useSelector } from \"react-redux\";\nimport { build, play } from \"../../store/stageSlice\";\nimport { setPlayers } from \"../../store/gameSlice\";\n\nimport styles from \"./GameStart.module.css\";\nimport { useEffect } from \"react\";\n\nconst GameStart = () => {\n  const players = useSelector((state) => state.game.players);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setPlayers({ players: [\"p1\", \"p2\"] }));\n  }, [dispatch]);\n  return (\n    <div className={styles.gameStart}>\n      <h1 className={styles.title}>Do you want to start the game?</h1>\n      <button\n        className={styles.btn}\n        onClick={() => {\n          dispatch(build());\n        }}\n      >\n        Start\n      </button>\n    </div>\n  );\n};\n\nexport default GameStart;\n","/home/gev/Desktop/seawars/src/components/stages/RoundStart.js",[],"/home/gev/Desktop/seawars/src/components/UI/Header.js",[],"/home/gev/Desktop/seawars/src/data/defaultShips.js",[],"/home/gev/Desktop/seawars/src/components/Ships/Ships.js",[],"/home/gev/Desktop/seawars/src/components/stages/Build/Build.js",["152","153","154","155","156","157","158","159","160"],"import { useDispatch, useSelector } from \"react-redux\";\nimport { play } from \"../../../store/stageSlice\";\n// import gameSlice, { generateFieldForComputer } from \"../../../store/gameSlice\";\nimport buildSlice, {\n  clearShips,\n  fieldHoverWhenBuilding,\n  placeShipWhenBuilding,\n  resetShips,\n} from \"../../../store/buildSlice\";\nimport fieldSlice, {\n  initField,\n  putShipIntoField,\n  resetHighlightOnField,\n  setField,\n} from \"../../../store/fieldSlice\";\n\nimport { initFieldsForOpponents, setScore } from \"../../../store/playSlice\";\n\nimport playSlice from \"../../../store/playSlice\";\n\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport Field from \"../../Field/Field\";\n\nimport styles from \"./Build.module.css\";\n\nimport ShipSelection from \"./ShipSelection/ShipSelection\";\nimport { hoverShipOverField } from \"../../../store/fieldSlice\";\nimport isAllowed from \"../../../utils/fieldUtils/isAllowed\";\nimport getCoordFromId from \"../../../utils/common/getCoordsFromId\";\n\nimport fillShips from \"../../../gameEngine/fillShips\";\nimport defaultShips from \"../../../data/defaultShips\";\nimport createMatrix from \"../../../utils/common/createMatrix\";\n\nconst Build = () => {\n  const dispatch = useDispatch();\n  const {\n    currentlyBuildingCellId: hoverId,\n    shipsToBuild,\n    selectedShipSize,\n    isVertical,\n  } = useSelector((state) => state.build);\n  const [startBuild, setStartBuild] = useState(false);\n\n  let players = useSelector((state) => state.game.players);\n  let fields = useSelector((state) => state.field.fields);\n\n  useEffect(() => {\n    if (startBuild) {\n      if (selectedShipSize != null && hoverId) {\n        dispatch(\n          hoverShipOverField({\n            hoverId,\n            selectedShipSize,\n            isVertical,\n            player: \"p1\",\n          })\n        );\n      }\n    }\n  }, [dispatch, hoverId, isVertical, selectedShipSize]);\n\n  const buildClickHandler = () => {\n    dispatch(initField({ players }));\n    setStartBuild(true);\n  };\n  const generatedFieldHandler = (player) => {\n    dispatch(\n      setField({\n        field: fillShips({\n          field: createMatrix(10, 10, { type: \"\" }),\n          shipToBuild: defaultShips,\n        }),\n        player: player,\n      })\n    );\n    if (player == \"p1\") {\n      dispatch(clearShips());\n    }\n  };\n  const resetFieldHandler = (player) => {\n    if (player == \"p1\") {\n      dispatch(resetShips());\n      dispatch(\n        setField({ player: \"p1\", field: createMatrix(10, 10, { type: \"\" }) })\n      );\n    }\n  };\n  const changeStageToPlayHandler = () => {\n    let amountCellsToBuild = defaultShips.reduce((sum, item) => {\n      return sum + item[1] * item[0];\n    }, 0);\n    let arePlayersFieldsGenerated = Object.keys(fields).every((player) => {\n      let field = fields[player];\n      let amountCellsInField = field.reduce(\n        (sum, row) =>\n          sum +\n          row.reduce((rowSum, cell) => {\n            if (cell.type === \"ship\") {\n              rowSum++;\n            }\n            return rowSum;\n          }, 0),\n        0\n      );\n      return amountCellsToBuild === amountCellsInField;\n    });\n    if (arePlayersFieldsGenerated) {\n      players.forEach((p) => {\n        dispatch(setScore({ player: p, playerScore: 0 }));\n        dispatch(initFieldsForOpponents({ players: players }));\n      });\n\n      dispatch(play());\n    }\n  };\n\n  return (\n    <div className={styles.build}>\n      {startBuild && (\n        <div className={styles.buildFieldsContainer}>\n          <div className={styles.buildFieldContainer}>\n            <div\n              className={styles.mb}\n              onMouseOverCapture={(event) => {\n                dispatch(\n                  fieldHoverWhenBuilding({ id: event.target.id, player: \"p1\" })\n                );\n              }}\n              onMouseOutCapture={(event) => {\n                dispatch(resetHighlightOnField({ player: \"p1\" }));\n                dispatch(fieldHoverWhenBuilding(\"\"));\n              }}\n              onClickCapture={(event) => {\n                const id = event.target.id;\n                if (\n                  selectedShipSize &&\n                  shipsToBuild.filter(\n                    (shipToBuild) => shipToBuild[0] == selectedShipSize\n                  )[0][1] != 0 &&\n                  isAllowed({\n                    field: fields[\"p1\"],\n                    coord: getCoordFromId(id),\n                    size: selectedShipSize,\n                    isVertical,\n                  })\n                ) {\n                  dispatch(placeShipWhenBuilding());\n                  dispatch(\n                    putShipIntoField({\n                      id,\n                      selectedShipSize: selectedShipSize,\n                      player: \"p1\",\n                      isVertical,\n                    })\n                  );\n                }\n              }}\n            >\n              <Field player={\"p1\"} field={fields.p1} />\n            </div>\n            <div>\n              <ShipSelection />\n              <div className={styles.action}>\n                <button\n                  className={styles.btnPrimary}\n                  onClick={() => {\n                    generatedFieldHandler(\"p1\");\n                  }}\n                >\n                  Generate\n                </button>\n                <button\n                  className={styles.btnPrimary}\n                  onClick={() => {\n                    resetFieldHandler(\"p1\");\n                  }}\n                >\n                  Reset\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className={styles.buildFieldContainer}>\n            <div>\n              <Field player={\"p2\"} hidden={true} field={fields.p2} />\n            </div>\n            <div className={styles.action}>\n              <button\n                className={styles.btnPrimary}\n                onClick={(event) => {\n                  generatedFieldHandler(\"p2\");\n                }}\n              >\n                Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div>\n        <button\n          className={styles.btnPrimary}\n          onClick={buildClickHandler}\n          disabled={startBuild}\n        >\n          Build\n        </button>\n        {startBuild && (\n          <button\n            className={styles.btnPrimary}\n            onClick={(event) => {\n              changeStageToPlayHandler();\n            }}\n          >\n            Play\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Build;\n","/home/gev/Desktop/seawars/src/store/buildSlice.js",[],"/home/gev/Desktop/seawars/src/components/stages/Build/Mask.js",[],"/home/gev/Desktop/seawars/src/store/fieldSlice.js",["161"],"import { createSlice } from \"@reduxjs/toolkit\";\nimport isShipOnFieldDead, {\n  getHitShipInfo,\n} from \"../gameEngine/isShipOnFieldDead\";\nimport getCoordFromId from \"../utils/common/getCoordsFromId\";\nimport vectors from \"../utils/common/vectors\";\nimport isAllowed from \"../utils/fieldUtils/isAllowed\";\n\nconst fieldSlice = createSlice({\n  name: \"field\",\n  initialState: {\n    fields: {},\n  },\n  reducers: {\n    initField: (state, action) => {\n      let { players } = action.payload;\n      let emptyField = [];\n      for (let i = 0; i < 10; i++) {\n        let row = [];\n        for (let j = 0; j < 10; j++) {\n          row.push({ type: \"\" });\n        }\n        emptyField[i] = row;\n      }\n      let fields = state.fields;\n      for (let player of players) {\n        fields[player] = emptyField.slice();\n      }\n      state.fields = fields;\n    },\n    setField: (state, action) => {\n      let player = action.payload.player;\n      let fields = state.fields;\n      fields = Object.assign(fields, { [player]: action.payload.field });\n      state.fields = fields;\n    },\n    hoverShipOverField: (state, action) => {\n      const {\n        hoverId,\n        selectedShipSize: size,\n        isVertical,\n        player,\n      } = action.payload;\n      const { row, col } = getCoordFromId(hoverId);\n      let field = state.fields[player];\n\n      if (isVertical) {\n        field = field.map((fieldRow, rowIdx) => {\n          return fieldRow.map((cell, colIdx) => {\n            let { type } = cell;\n            if (type !== \"highlight\" && type !== \"\") {\n              return { type };\n            }\n            if (type === \"highlight\") {\n              type = \"\";\n            }\n            if (rowIdx >= row && row + size > rowIdx && col === colIdx) {\n              return { type: \"highlight\" };\n            }\n            if (\n              row + size > field.length &&\n              field.length - size <= rowIdx &&\n              colIdx === col\n            ) {\n              return { type: \"highlight\" };\n            }\n\n            return { type };\n          });\n        });\n      } else {\n        field = field.map((fieldRow, rowIdx) => {\n          return fieldRow.map((cell, colIdx) => {\n            let { type } = cell;\n            if (type !== \"highlight\" && type !== \"\") {\n              return { type };\n            }\n            if (type === \"highlight\") {\n              type = \"\";\n            }\n            if (rowIdx == row && col + size > colIdx && colIdx >= col) {\n              return { type: \"highlight\" };\n            }\n            if (\n              col + size > field[0].length &&\n              field[0].length - size <= colIdx &&\n              row === rowIdx\n            ) {\n              return { type: \"highlight\" };\n            }\n            return { type };\n          });\n        });\n      }\n\n      state.fields[player] = field;\n    },\n    resetHighlightOnField: (state, action) => {\n      let field = state.fields[action.payload.player];\n      field = field.map((row) =>\n        row.map((cell) => {\n          if (cell.type === \"highlight\") {\n            cell.type = \"\";\n          }\n          return cell;\n        })\n      );\n      state.fields[\"p1\"] = field;\n    },\n    putShipIntoField: (state, action) => {\n      let { selectedShipSize: size, id, player, isVertical } = action.payload;\n      let field = state.fields[player].slice();\n      let { row, col } = getCoordFromId(id);\n\n      if (\n        isVertical &&\n        isAllowed({\n          field,\n          coord: { row, col },\n          size,\n          isVertical: true,\n        })\n      ) {\n        field = field.map((fieldRow, rowIdx) => {\n          return fieldRow.map((cell, colIdx) => {\n            let type = cell.type;\n            if (rowIdx >= row && rowIdx < row + size && colIdx === col) {\n              type = \"ship\";\n            }\n            if (\n              row + size > field.length &&\n              field.length - size <= rowIdx &&\n              colIdx === col\n            ) {\n              type = \"ship\";\n            }\n            return { type };\n          });\n        });\n      }\n      if (\n        !isVertical &&\n        isAllowed({ field, coord: { row, col }, size, isVertical: false })\n      ) {\n        field = field.map((fieldRow, rowIdx) => {\n          return fieldRow.map((cell, colIdx) => {\n            let type = cell.type;\n            if (colIdx >= col && colIdx < col + size && rowIdx === row) {\n              type = \"ship\";\n            }\n            if (\n              col + size > field[0].length &&\n              field[0].length - size <= colIdx &&\n              rowIdx === row\n            ) {\n              type = \"ship\";\n            }\n            return { type };\n          });\n        });\n      }\n\n      state.fields[player] = field;\n    },\n    hit: (state, action) => {\n      const { row, col, player } = action.payload;\n      let playerField = state.fields[player];\n      if (playerField[row][col].type === \"ship\") {\n        playerField[row][col].type = \"dead\";\n        let field = state.fields[player];\n        if (isShipOnFieldDead({ field: state.fields[player], row, col })) {\n          let { ship } = getHitShipInfo({\n            field: state.fields[player],\n            row,\n            col,\n          });\n          ship.forEach((cell) => {\n            vectors\n              .lookAround({ row: cell.row, col: cell.col })\n              .map((v) => {\n                let f = field[v.row][v.col];\n                return { type: f.type, row: v.row, col: v.col };\n              })\n              .filter((cell) => {\n                return cell.type === \"\" || cell.type === \"miss\";\n              })\n              .forEach((cell) => {\n                field[cell.row][cell.col].type = \"notAllowed\";\n              });\n          });\n        }\n      }\n      if (playerField[row][col].type === \"\") {\n        playerField[row][col].type = \"miss\";\n      }\n    },\n  },\n});\n\nexport const {\n  initField,\n  setField,\n  putShipIntoField,\n  hoverShipOverField,\n  resetHighlightOnField,\n  hit,\n} = fieldSlice.actions;\n\nexport default fieldSlice.reducer;\n","/home/gev/Desktop/seawars/src/utils/fieldUtils/isAllowed.js",[],"/home/gev/Desktop/seawars/src/utils/common/getCoordsFromId.js",[],"/home/gev/Desktop/seawars/src/store/gameSlice.js",[],"/home/gev/Desktop/seawars/src/gameEngine/fillShips.js",["162","163"],"import defaultShips from \"../data/defaultShips\";\nimport { getShipCoords } from \"../utils/fieldUtils/isAllowed\";\nimport isAllowed from \"../utils/fieldUtils/isAllowed\";\nimport { compose } from \"@reduxjs/toolkit\";\n\nfunction getRandomInt(maxNum = 10) {\n  return Math.floor(Math.random() * maxNum);\n}\n\nfunction defaultField(maxRow = 10, maxCol = 10) {\n  return Array(10).fill(Array(10).fill({ type: \"\" }));\n}\n\nfunction fillShips({ field, shipsToFill = defaultShips }) {\n  let generatedField = field.slice();\n  let shipsLeftToFill = shipsToFill.slice();\n  let iter = 0;\n  const maxRow = 10;\n  const maxCol = 10;\n\n  while (shipsLeftToFill.some((ship) => ship[1] > 0) && iter < 250) {\n    iter++;\n    let isVertical = getRandomInt(2) % 2 === 0;\n\n    let row = getRandomInt(10);\n    let col = getRandomInt(10);\n    let size = shipsLeftToFill[getRandomInt(shipsLeftToFill.length)][0];\n    if (isVertical) {\n      if (row + size > maxRow) {\n        row = maxRow - size;\n      }\n    }\n    if (!isVertical) {\n      if (col + size > maxCol) {\n        col = maxCol - size;\n      }\n    }\n    let ship = getShipCoords({\n      field: generatedField,\n      row,\n      col,\n      size,\n      isVertical,\n    });\n    if (\n      isAllowed({\n        field: generatedField,\n        coord: { row, col },\n        size,\n        isVertical,\n      })\n    ) {\n      ship.forEach((cell) => {\n        let { row, col } = cell;\n        generatedField[row][col] = { type: \"ship\" };\n      });\n      shipsLeftToFill = shipsLeftToFill\n        .map((item) => {\n          if (item[0] === size) {\n            let amount = item[1];\n            return [size, amount - 1];\n          }\n          return item;\n        })\n        .filter((item) => item[1] !== 0);\n    }\n  }\n\n  return generatedField;\n}\n\nexport default fillShips;\n","/home/gev/Desktop/seawars/src/utils/common/createMatrix.js",[],"/home/gev/Desktop/seawars/src/components/stages/Play/Play.js",["164","165","166","167","168","169","170","171"],"import { useCallback, useMemo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { hit, initField } from \"../../../store/fieldSlice\";\nimport { final, start } from \"../../../store/stageSlice\";\nimport {\n  hitOpponentField,\n  switchPlayer,\n  setWinner,\n} from \"../../../store/playSlice\";\n\nimport { randomInt } from \"../../../utils/common/base\";\nimport defaultShips from \"../../../data/defaultShips\";\n\nimport getCoordFromId from \"../../../utils/common/getCoordsFromId\";\nimport aiPlay from \"../../../gameEngine/aiPlay\";\n\nimport Score from \"./Score\";\nimport Field from \"../../Field/Field\";\n\nimport styles from \"./Play.module.css\";\n\nconst Play = () => {\n  const dispatch = useDispatch();\n  const playerTurn = useSelector((state) => state.play.playerTurn);\n  const fields = useSelector((state) => state.field.fields);\n  const players = useSelector((state) => state.game.players);\n  const score = useSelector((state) => state.play.score);\n  const shipsToBuild = useSelector((state) => state.build.shipsToBuild);\n  const targetScore = useMemo(() => {\n    let sum = defaultShips.reduce((sum, ships) => {\n      console.log(sum, ships[0], ships[1]);\n      return sum + ships[0] * ships[1];\n    }, 0);\n    return sum;\n  }, [defaultShips]);\n  useEffect(() => {\n    if (playerTurn === null) {\n      const playerTurnAtStart = players[randomInt(players.length)];\n      dispatch(switchPlayer(playerTurnAtStart));\n    }\n    if (playerTurn === \"p2\") {\n      let a = aiPlay(oppositionFields[\"p1\"]);\n      let cell = fields[\"p1\"][a.row][a.col];\n      if (cell.type === \"\" || cell.type === \"ship\") {\n        dispatch(\n          hitOpponentField({\n            player: \"p1\",\n            row: a.row,\n            col: a.col,\n            field: fields[\"p1\"],\n          })\n        );\n        dispatch(hit({ player: \"p1\", col: a.col, row: a.row }));\n      }\n      if (cell.type === \"\" || cell.type === \"dead\") {\n        dispatch(switchPlayer(\"p1\"));\n      }\n    }\n  }, [playerTurn, fields[\"p1\"]]);\n\n  useEffect(() => {\n    let winner;\n    console.log(score.p1, score.p1, targetScore, score.p1 === targetScore);\n    if ([+score.p1, +score.p2].some((score) => score === targetScore)) {\n      winner = score.p1 === targetScore ? \"p1\" : \"p2\";\n\n      dispatch(setWinner(winner));\n      dispatch(final());\n    }\n  }, [score.p1, score.p2]);\n  const oppositionFields = useSelector(\n    (state) => state.play.fieldsForOpponents\n  );\n  const fieldClickHandler = (event, payload) => {\n    if (playerTurn === \"p1\") {\n      if (!event.target.id) {\n        return false;\n      }\n      let { row, col } = getCoordFromId(event.target.id);\n      let targetCellType = fields.p2[row][col].type;\n      if (targetCellType === \"ship\" || targetCellType === \"\") {\n        dispatch(\n          hitOpponentField({ player: \"p2\", row, col, field: fields[\"p2\"] })\n        );\n        dispatch(hit({ row, col, player: \"p2\" }));\n      }\n      if (targetCellType === \"\") {\n        dispatch(switchPlayer(playerTurn == \"p1\" ? \"p2\" : \"p1\"));\n      }\n      if (targetCellType !== \"\" && targetCellType !== \"ship\") {\n        return false;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className={styles.info}>\n        <h2 className={styles.turnInfo}>\n          Player To Make a Turn <span>{playerTurn}</span>\n        </h2>\n        <div>\n          <Score />\n        </div>\n      </div>\n      <div className={styles.fieldsContainer}>\n        <div\n          onClickCapture={(event) => {\n            fieldClickHandler(event, { player: \"p1\" });\n          }}\n          className={styles.fieldContainer}\n        >\n          <Field player={\"p1\"} field={fields.p1} />\n        </div>\n        {oppositionFields.p2 && (\n          <div\n            onClickCapture={(event) => {\n              fieldClickHandler(event, { player: \"p2\" });\n            }}\n            className={styles.fieldContainer}\n          >\n            <Field player={\"p2\"} hidden={false} field={oppositionFields.p2} />\n          </div>\n        )}\n      </div>\n      <div class={styles.newGameBox}>\n        <button className={styles.btn} onClick={() => dispatch(start())}>\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Play;\n","/home/gev/Desktop/seawars/src/store/playSlice.js",["172","173","174"],"import { createSlice } from \"@reduxjs/toolkit\";\nimport isShipOnFieldDead, {\n  getHitShipInfo,\n} from \"../gameEngine/isShipOnFieldDead\";\nimport createMatrix from \"../utils/common/createMatrix\";\nimport isOutOfBounds from \"../utils/common/isOutOfBounds\";\nimport vectors from \"../utils/common/vectors\";\n\nconst playSlice = createSlice({\n  name: \"play\",\n  initialState: {\n    playerTurn: null,\n    score: { p1: 0, p2: 0 },\n    fieldsForOpponents: {},\n  },\n  reducers: {\n    initFieldsForOpponents(state, action) {\n      let { players } = action.payload;\n      let fields = players.reduce((acc, p) => {\n        acc[p] = createMatrix(10, 10, { type: \"fog\" });\n        return acc;\n      }, {});\n      state.fieldsForOpponents = fields;\n    },\n    setScore: (state, action) => {\n      const { player, playerScore } = action.payload;\n      state.score[player] = playerScore;\n    },\n    switchPlayer: (state, action) => {\n      state.playerTurn = action.payload;\n    },\n    hitOpponentField: (state, action) => {\n      const { player, field, row, col } = action.payload;\n      let fieldForOpponent = state.fieldsForOpponents[player];\n      if (field[row][col].type == \"ship\") {\n        fieldForOpponent[row][col].type = \"dead\";\n        let score = state.score;\n        if (player === \"p2\") {\n          score[\"p1\"] = score[\"p1\"] + 1;\n        } else {\n          score[\"p2\"] = score[\"p2\"] + 1;\n        }\n        state.score = score;\n\n        if (isShipOnFieldDead({ field, row, col })) {\n          let { ship } = getHitShipInfo({ field, row, col });\n          ship.forEach((cell) => {\n            vectors\n              .lookAround({ row: cell.row, col: cell.col })\n              .map((v) => {\n                let f = field[v.row][v.col];\n                return { type: f.type, row: v.row, col: v.col };\n              })\n              .filter((cell) => {\n                return cell.type === \"\" || cell.type === \"miss\";\n              })\n              .forEach((cell) => {\n                fieldForOpponent[cell.row][cell.col].type = \"notAllowed\";\n              });\n          });\n        }\n      }\n      if (field[row][col].type == \"\") {\n        fieldForOpponent[row][col].type = \"miss\";\n      }\n      state.fieldsForOpponents[player] = fieldForOpponent;\n    },\n    setWinner: (state, action) => {\n      state.winner = action.payload;\n    },\n  },\n});\n\nexport const {\n  switchPlayer,\n  setScore,\n  initFieldsForOpponents,\n  hitOpponentField,\n  setWinner,\n} = playSlice.actions;\n\nexport default playSlice.reducer;\n","/home/gev/Desktop/seawars/src/gameEngine/aiPlay.js",["175","176"],"import isOutOfBounds from \"../utils/common/isOutOfBounds\";\nimport vectors, { directions } from \"../utils/common/vectors\";\nimport { randomInt } from \"../utils/common/base\";\n\nfunction scanForWoundedShip(field) {\n  for (let row = 0; row < field.length; row++) {\n    for (let col = 0; col < field[row].length; col++) {\n      let cell = field[row][col];\n      if (cell.type === \"dead\") {\n        let coordsAroundCell = vectors.lookSides({ row, col });\n        let isAdjacentCellsWounded = coordsAroundCell.some(\n          (c) => field[c.row][c.col].type === \"fog\"\n        );\n        if (isAdjacentCellsWounded) {\n          return { wounded: true, row, col };\n        }\n      }\n    }\n  }\n  return { wounded: false, row: null, col: null };\n}\n\nfunction crawlUntil({ field, row, col, direction }) {\n  let targetCell = null;\n  let coords = { row, col };\n  while (\n    !isOutOfBounds(coords.row, coords.col, 10, 10) &&\n    field[coords.row][coords.col].type === \"dead\"\n  ) {\n    coords = vectors[direction]({ row: coords.row, col: coords.col });\n    if (\n      !isOutOfBounds(coords.row, coords.col, 10, 10) &&\n      field[coords.row][coords.col].type === \"fog\"\n    ) {\n      targetCell = { row: coords.row, col: coords.col };\n      return targetCell;\n    }\n  }\n  return targetCell;\n}\n\nfunction getTargets({ field, row, col }) {\n  let typeOfSides = directions.reduce((acc, direction) => {\n    let coordOfDirection = vectors[direction]({ row, col });\n    let { row: rowOfDirection, col: colOfDirection } = coordOfDirection;\n    if (isOutOfBounds(rowOfDirection, colOfDirection, 10, 10)) {\n      return acc;\n    }\n\n    acc[direction] = field[rowOfDirection][colOfDirection].type;\n    return acc;\n  }, {});\n  let targets = [];\n  if (typeOfSides.up === \"dead\" || typeOfSides.down == \"dead\") {\n    targets.push(\n      crawlUntil({ field, row, col, direction: \"up\" }),\n      crawlUntil({ field, row, col, direction: \"down\" })\n    );\n  }\n  if (typeOfSides.left === \"dead\" || typeOfSides.right == \"dead\") {\n    targets.push(\n      crawlUntil({ field, row, col, direction: \"left\" }),\n      crawlUntil({ field, row, col, direction: \"right\" })\n    );\n  }\n  return targets.filter((t) => t !== null);\n}\n\nfunction aiPlay(field) {\n  let { wounded, row, col } = scanForWoundedShip(field);\n  if (wounded) {\n    let sidesCoords = vectors.lookSides({ row, col });\n    let isOnlyOneCellWounded = sidesCoords\n      .map((side) => field[side.row][side.col])\n      .every((sideCell) => {\n        return sideCell.type !== \"dead\";\n      });\n    if (isOnlyOneCellWounded) {\n      sidesCoords = sidesCoords.filter(\n        (v) => field[v.row][v.col].type === \"fog\"\n      );\n      let randomIdx = randomInt(sidesCoords.length);\n      return sidesCoords[randomIdx];\n    }\n    let t = getTargets({ field, row, col }).filter(\n      (t) => field[t.row][t.col].type === \"fog\"\n    );\n    return t[randomInt(t.length)];\n  }\n  let randomRow = Math.floor(Math.random() * field.length);\n  let randomCol = Math.floor(Math.random() * field[0].length);\n  while (field[randomRow][randomCol].type !== \"fog\") {\n    randomCol = randomInt(10);\n    randomRow = randomInt(10);\n  }\n  return {\n    row: randomRow,\n    col: randomCol,\n  };\n}\n\nexport default aiPlay;\n","/home/gev/Desktop/seawars/src/utils/common/vectors.js",[],"/home/gev/Desktop/seawars/src/utils/common/isOutOfBounds.js",[],"/home/gev/Desktop/seawars/src/gameEngine/isShipOnFieldDead.js",["177","178"],"import vectors, { directions } from \"../utils/common/vectors\";\nimport isOutOfBounds from \"../utils/common/isOutOfBounds\";\n\nconst isShip = (cell) => cell && (cell.type === \"ship\" || cell.type === \"dead\");\n\nconst getHitShipInfo = ({ field, row, col }) => {\n  let isDead = true;\n  let ship = [{ row, col }];\n\n  directions.forEach((direction) => {\n    let dCoords = vectors[direction]({ row, col });\n    let iter = 0;\n    while (\n      !isOutOfBounds(dCoords.row, dCoords.col, 10, 10) &&\n      field[dCoords.row][dCoords.col].type === \"dead\" &&\n      isDead\n    ) {\n      ship.push({ row: dCoords.row, col: dCoords.col });\n      dCoords = vectors[direction]({ row: dCoords.row, col: dCoords.col });\n    }\n    if (\n      !isOutOfBounds(dCoords.row, dCoords.col, 10, 10) &&\n      field[dCoords.row][dCoords.col].type === \"ship\"\n    ) {\n      isDead = false;\n    }\n  });\n  return { isDead, ship };\n};\n\nconst isShipOnFieldDead = ({ field, row, col }) => {\n  return getHitShipInfo({ field, row, col }).isDead;\n};\n\nexport { getHitShipInfo };\n\nexport default isShipOnFieldDead;\n","/home/gev/Desktop/seawars/src/utils/common/base.js",[],"/home/gev/Desktop/seawars/src/components/stages/Play/Score.js",[],"/home/gev/Desktop/seawars/src/components/stages/Final.js",[],"/home/gev/Desktop/seawars/src/components/stages/Build/ShipSelection/ShipSelection.js",["179","180"],"import Ship from \"../../../Ships/Ships\";\n\nimport styles from \"./ShipSelection.module.css\";\n\nimport defaultShips from \"../../../../data/defaultShips\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectShip } from \"../../../../store/buildSlice\";\n\nconst ShipSelection = () => {\n  const selectedShipSize = useSelector((state) => state.build.selectedShipSize);\n  const shipsToBuild = useSelector((state) => state.build.shipsToBuild);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      {shipsToBuild.map((ship, idx) => {\n        return (\n          <div\n            key={idx}\n            className={`${styles.ship} ${styles.fullWidth} ${\n              selectedShipSize == ship[0] ? styles.selectedShip : \"\"\n            }`}\n            onClick={() => {\n              dispatch(selectShip(ship[0]));\n            }}\n          >\n            <Ship size={ship[0]} />\n            <span className={styles.shipAmountLabel}>{ship[1]}</span>\n          </div>\n        );\n      })}\n      ;\n    </div>\n  );\n};\n\nexport default ShipSelection;\n",{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":17},{"ruleId":"185","severity":1,"message":"189","line":3,"column":8,"nodeType":"187","messageId":"188","endLine":3,"endColumn":18},{"ruleId":"185","severity":1,"message":"190","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":18},{"ruleId":"191","severity":1,"message":"192","line":26,"column":6,"nodeType":"193","endLine":26,"endColumn":8,"suggestions":"194"},{"ruleId":"185","severity":1,"message":"195","line":1,"column":10,"nodeType":"187","messageId":"188","endLine":1,"endColumn":21},{"ruleId":"185","severity":1,"message":"196","line":17,"column":5,"nodeType":"187","messageId":"188","endLine":17,"endColumn":20},{"ruleId":"181","replacedBy":"197"},{"ruleId":"183","replacedBy":"198"},{"ruleId":"185","severity":1,"message":"199","line":2,"column":17,"nodeType":"187","messageId":"188","endLine":2,"endColumn":21},{"ruleId":"185","severity":1,"message":"200","line":9,"column":9,"nodeType":"187","messageId":"188","endLine":9,"endColumn":16},{"ruleId":"185","severity":1,"message":"190","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":18},{"ruleId":"185","severity":1,"message":"201","line":10,"column":8,"nodeType":"187","messageId":"188","endLine":10,"endColumn":18},{"ruleId":"185","severity":1,"message":"202","line":19,"column":8,"nodeType":"187","messageId":"188","endLine":19,"endColumn":17},{"ruleId":"185","severity":1,"message":"203","line":21,"column":10,"nodeType":"187","messageId":"188","endLine":21,"endColumn":21},{"ruleId":"191","severity":1,"message":"204","line":62,"column":6,"nodeType":"193","endLine":62,"endColumn":55,"suggestions":"205"},{"ruleId":"206","severity":1,"message":"207","line":78,"column":16,"nodeType":"208","messageId":"209","endLine":78,"endColumn":18},{"ruleId":"206","severity":1,"message":"207","line":83,"column":16,"nodeType":"208","messageId":"209","endLine":83,"endColumn":18},{"ruleId":"206","severity":1,"message":"207","line":140,"column":53,"nodeType":"208","messageId":"209","endLine":140,"endColumn":55},{"ruleId":"206","severity":1,"message":"210","line":141,"column":27,"nodeType":"208","messageId":"209","endLine":141,"endColumn":29},{"ruleId":"206","severity":1,"message":"207","line":81,"column":24,"nodeType":"208","messageId":"209","endLine":81,"endColumn":26},{"ruleId":"185","severity":1,"message":"211","line":4,"column":10,"nodeType":"187","messageId":"188","endLine":4,"endColumn":17},{"ruleId":"185","severity":1,"message":"212","line":10,"column":10,"nodeType":"187","messageId":"188","endLine":10,"endColumn":22},{"ruleId":"185","severity":1,"message":"203","line":1,"column":10,"nodeType":"187","messageId":"188","endLine":1,"endColumn":21},{"ruleId":"185","severity":1,"message":"213","line":3,"column":15,"nodeType":"187","messageId":"188","endLine":3,"endColumn":24},{"ruleId":"185","severity":1,"message":"214","line":28,"column":9,"nodeType":"187","messageId":"188","endLine":28,"endColumn":21},{"ruleId":"191","severity":1,"message":"215","line":35,"column":6,"nodeType":"193","endLine":35,"endColumn":20,"suggestions":"216"},{"ruleId":"191","severity":1,"message":"217","line":59,"column":6,"nodeType":"193","endLine":59,"endColumn":32,"suggestions":"218"},{"ruleId":"191","severity":1,"message":"219","line":59,"column":19,"nodeType":"220","endLine":59,"endColumn":31},{"ruleId":"191","severity":1,"message":"221","line":70,"column":6,"nodeType":"193","endLine":70,"endColumn":26,"suggestions":"222"},{"ruleId":"206","severity":1,"message":"207","line":88,"column":42,"nodeType":"208","messageId":"209","endLine":88,"endColumn":44},{"ruleId":"185","severity":1,"message":"223","line":6,"column":8,"nodeType":"187","messageId":"188","endLine":6,"endColumn":21},{"ruleId":"206","severity":1,"message":"207","line":35,"column":32,"nodeType":"208","messageId":"209","endLine":35,"endColumn":34},{"ruleId":"206","severity":1,"message":"207","line":63,"column":32,"nodeType":"208","messageId":"209","endLine":63,"endColumn":34},{"ruleId":"206","severity":1,"message":"207","line":54,"column":53,"nodeType":"208","messageId":"209","endLine":54,"endColumn":55},{"ruleId":"206","severity":1,"message":"207","line":60,"column":56,"nodeType":"208","messageId":"209","endLine":60,"endColumn":58},{"ruleId":"185","severity":1,"message":"224","line":4,"column":7,"nodeType":"187","messageId":"188","endLine":4,"endColumn":13},{"ruleId":"185","severity":1,"message":"225","line":12,"column":9,"nodeType":"187","messageId":"188","endLine":12,"endColumn":13},{"ruleId":"185","severity":1,"message":"226","line":5,"column":8,"nodeType":"187","messageId":"188","endLine":5,"endColumn":20},{"ruleId":"206","severity":1,"message":"207","line":21,"column":32,"nodeType":"208","messageId":"209","endLine":21,"endColumn":34},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"no-unused-vars","'gameSlice' is defined but never used.","Identifier","unusedVar","'stageSlice' is defined but never used.","'buildSlice' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["229"],"'useSelector' is defined but never used.","'backgroundStyle' is assigned a value but never used.",["227"],["228"],"'play' is defined but never used.","'players' is assigned a value but never used.","'fieldSlice' is defined but never used.","'playSlice' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'startBuild'. Either include it or remove the dependency array.",["230"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'compose' is defined but never used.","'defaultField' is defined but never used.","'initField' is defined but never used.","'shipsToBuild' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'defaultShips'. Either exclude it or remove the dependency array. Outer scope values like 'defaultShips' aren't valid dependencies because mutating them doesn't re-render the component.",["231"],"React Hook useEffect has missing dependencies: 'dispatch', 'fields', 'oppositionFields', and 'players'. Either include them or remove the dependency array.",["232"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has missing dependencies: 'dispatch' and 'targetScore'. Either include them or remove the dependency array.",["233"],"'isOutOfBounds' is defined but never used.","'isShip' is assigned a value but never used.","'iter' is assigned a value but never used.","'defaultShips' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [dispatch]",{"range":"244","text":"245"},"Update the dependencies array to be: [dispatch, hoverId, isVertical, selectedShipSize, startBuild]",{"range":"246","text":"247"},"Update the dependencies array to be: []",{"range":"248","text":"249"},"Update the dependencies array to be: [dispatch, fields, oppositionFields, playerTurn, players]",{"range":"250","text":"251"},"Update the dependencies array to be: [dispatch, score.p1, score.p2, targetScore]",{"range":"252","text":"253"},[908,910],"[dispatch]",[1813,1862],"[dispatch, hoverId, isVertical, selectedShipSize, startBuild]",[1248,1262],"[]",[1977,2003],"[dispatch, fields, oppositionFields, playerTurn, players]",[2319,2339],"[dispatch, score.p1, score.p2, targetScore]"]